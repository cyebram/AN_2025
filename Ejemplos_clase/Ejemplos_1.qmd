---
title: "Ejemplos 1. Preliminares Python y representación numérica"
format: html
editor: visual
---

# Listas

Crear una lista cuyos elementos sean números, posteriormente aplicar diferentes funciones y métodos.

```{python}
lista_1 = [1, 2, 85, 4, 7]
lista_1
```
Lista mixta (con strings, enteros, booleanos, etc.)

```{python}
lista_2 = [1, "a", "Nombre", "4", True, False, [2, 3]]
lista_2
```
Método append (agrega un elemento al final de la lista)


```{python}
lista_1.append(16)
lista_1
```
Método extend (agrega elementos de una lista a otra)

```{python}
lista_1.extend([9, 19, 20])
lista_1
```
Método index (muestra el índice de un elemento en la lista)

```{python}
lista_1.index(7)
```
Método reverse (invierte el orden de los elementos de una lista)

```{python}
lista_1.reverse()
lista_1
```

Convierte una cadena de caracteres (string) a una lista

```{python}
lista_str = list("Cadena a lista")
lista_str
```


# For

Aplicar el ciclo for a listas


```{python}
numeros = [3, 5, 6, 8, 9, 16] #Se crea una lista de números
suma = 0 # Se inicia el valor de la suma

for number in numeros:
  suma = suma + number
  print(f"La suma parcial de los números en la lista es: {suma}")
print("------------------")  
print(f"La suma total es: {suma}")

```



# Módulo `math`

Explorar funciones.


```{python}
import math
math.cos(math.pi/5)
```


# Ejercicios

## Función de binaario a decimal

Escribir una función llamada `my_bin_2_dec(b)` donde $b$ es un número binario representado por una cadena de caracteres de 1's y 0's. El último elemento de $b$ representa el coeficiente de $2^0$, el penúltimo elemento de $b$ representa el coeficiente de $2^1$ y así sucesivamente. El resultado $d$, debe ser la representación decimal de $b$.

```{python}
def my_bin_2_dec(b):
  b=list(b) #Convierte la cadena de 1's y 0's en una lista
  exponente = len(b)-1 # Calcula el valor inicial de la potencia de 2 
  d = 0 #Inicia el valor del número decimal con cero
  for bit in b:
    d = d + (int(bit) * 2 ** exponente) # Suma la potencia de 2 correspondiente al dígito bit
    exponente -=1 # Disminuye en una unidad el exponente
  return d



# Prueba 

my_bin_2_dec("10010")

```




Comparar los resultados con la función `int(numero, 2)` de Python. 

```{python}
int("10010", 2)
```

## Función de decimal a binario

Escribir una función llamada `my_dec_2_bin(d)` donde $b$ es un número entero positivo en base 10. El resultado, $b$, debe ser una lista de 1's y 0's. 

Comparar los resultados con la función `bin()` de Python. 


```{python}
def my_dec_2_bin(d):
  q=d
  b= []
  while q>0:
    b.append(q%2)
    q= q//2
  b.reverse()
  return b

my_dec_2_bin(18)
```
Verificación con la función `bin()`

```{python}
bin(18)
```


# Representación IEEE 754


```{python}
import struct
numero = 15

bits_64 = struct.unpack('>Q', struct.pack('>d', numero))[0]
binario_64 = f"{bits_64:064b}"

binario_64
```


**Descripción**:

1. `struct.pack`:
Convierte un número de punto flotante a su representación binaria en formato IEEE 754. Los formatos `'>f'` y `'>d'` indican precisión simple y doble, respectivamente.

2. `struct.unpack`:
Interpreta los datos binarios como enteros sin signo (`'>I'` para 32 bits, `'>Q'` para 64 bits).

3. Formato binario:
Los enteros obtenidos se convierten a binarios utilizando una cadena de formato con ceros iniciales (`f"{bits_64:064b}"`).



